---

# Here we are going to use self-signed certificates for Transport (Node-Node communication) & REST API layer
# Using searchguard offline TLS tool to create node & root certificates
- name: Security Plugin remove the certificates
  local_action: command chdir=/tmp rm -rf opensearch-nodecerts
  
- name: Security Plugin configuration | Create local temporary directory for certificates generation
  local_action:
    module: file
    path: /tmp/opensearch-nodecerts
    state: directory
  run_once: true  
  register: configuration
  become: yes

- name: Security Plugin configuration | Download certificates generation tool
  local_action:
    module: get_url
    url: https://search.maven.org/remotecontent?filepath=com/floragunn/search-guard-tlstool/1.5/search-guard-tlstool-1.5.tar.gz
    dest: /tmp/opensearch-nodecerts/search-guard-tlstool.tar.gz
  run_once: true  
  become: yes

- name: Security Plugin configuration | Extract the certificates generation tool
  local_action: command chdir=/tmp/opensearch-nodecerts tar -xvf search-guard-tlstool.tar.gz
  run_once: true
  become: yes

- name: Security Plugin configuration | Make the executable file
  local_action:
    module: file
    dest: /tmp/opensearch-nodecerts/tools/sgtlstool.sh
    mode: a+x
  run_once: true  
  become: yes

- name: Security Plugin configuration | Prepare the certificates generation template file
  local_action:
    module: template
    src: tlsconfig.yml
    dest: /tmp/opensearch-nodecerts/config/tlsconfig.yml
  run_once: true  
  become: yes

- name: Security Plugin configuration | Copy the root ca certificate to /tmp directory
  shell: "sudo cp {{ os_conf_dir }}/{{ item }} /tmp/opensearch-nodecerts/config"
  with_items:
    - root-ca.pem
    - root-ca.key
    - admin.key
    - admin.pem
  run_once: true
  become: yes
  delegate_to: localhost

- name: Security Plugin configuration | Changing ownership of config directory  
  shell: 'sudo chown -R "{{ os_user }}":"{{ os_group }}" /tmp/opensearch-nodecerts/config'
  run_once: true  
  become: yes  
  delegate_to: localhost

- name: Security Plugin configuration | Generate the node & admin certificates in local
  local_action:
    module: command /tmp/opensearch-nodecerts/tools/sgtlstool.sh -c /tmp/opensearch-nodecerts/config/tlsconfig.yml -crt -t /tmp/opensearch-nodecerts/config/
  environment:
    JAVA_HOME: "{{ os_home }}/jdk"
  run_once: true  
  become: yes
  
- name: Security Plugin configuration | Copy the node & admin certificates to opensearch nodes
  copy:
    src: "/tmp/opensearch-nodecerts/config/{{ item }}"
    dest: "{{ os_conf_dir }}"
    mode: 0600
  with_items:
    - root-ca.pem
    - root-ca.key
    - "{{ inventory_hostname }}.key"
    - "{{ inventory_hostname }}.pem"
    - "{{ inventory_hostname }}_http.key"
    - "{{ inventory_hostname }}_http.pem"
    - admin.key
    - admin.pem
  become: yes

- name: Security Plugin configuration | Copy the security configuration file 1 to cluster
  blockinfile:
    block: "{{ lookup('template', 'templates/security_conf.yml') }}"
    dest: "{{ os_conf_dir }}/opensearch.yml"
    backup: yes
    insertafter: EOF
    marker: "## {mark} OpenSearch Security common configuration ##"
  become: yes

- name: Security Plugin configuration | Copy the security configuration file 2 to cluster
  blockinfile:
    block: "{{ lookup('file', '/tmp/opensearch-nodecerts/config/{{ inventory_hostname }}_elasticsearch_config_snippet.yml') }}"
    dest: "{{ os_conf_dir }}/opensearch.yml"
    backup: yes
    insertafter: EOF
    marker: "## {mark} opensearch Security Node & Admin certificates configuration ##"
  become: yes

- name: Security Plugin configuration | Prepare the opensearch security configuration file
  command: sed -i 's/searchguard/plugins.security/g' {{ os_conf_dir }}/opensearch.yml
  become: yes

- name: Security Plugin configuration | Set the file ownerships
  file:
    dest: "{{ os_home }}"
    owner: "{{ os_user }}"
    group: "{{ os_group }}"
    recurse: yes
  become: yes

- name: Security Plugin configuration | Set the folder permission
  file:
    dest: "{{ os_conf_dir }}"
    owner: "{{ os_user }}"
    group: "{{ os_group }}"
    mode: 0700
  become: yes

- name: replace line
  lineinfile: 
    path: "{{os_conf_dir}}/opensearch.yml"  
    regexp: '^plugins.security.ssl.http.enabled' 
    line: "plugins.security.ssl.http.enabled: false"
  become: yes


- name: replace line to include all certificates
  replace:
    path: "{{os_conf_dir}}/opensearch.yml"
    regexp: 'CN={{ inventory_hostname }}'
    replace: "CN=*"
  become: yes

  #- name: Wait for server to restart
  #  wait_for: host={{ hostvars[inventory_hostname]['ansible_private_host'] }} port={{os_api_port}} delay=60 connect_timeout=1
  #  become: yes
  
- name: Security Plugin configuration | Copy the opensearch security internal users template
  template:
    src: internal_users.yml
    dest: "{{ os_sec_plugin_conf_path }}/internal_users.yml"
    mode: 0644
  run_once: true  
  become: yes
    
- name: Security Plugin Install | Set the Admin user password
  shell: >
    sed -i '/hash: / s,{{ os_credentials.os_admin_password }},'$(bash {{ os_sec_plugin_tools_path }}/hash.sh -p {{ os_credentials.os_admin_password }} | tail -1)','
    {{ os_sec_plugin_conf_path }}/internal_users.yml
  environment:
    JAVA_HOME: "{{ os_home }}/jdk"  
  run_once: true  
  become: yes

- name: Comment audit log
  lineinfile:
    path: "{{os_conf_dir}}/opensearch.yml"
    regexp: '^plugins.security.audit.type'
    line: "#plugins.security.audit.type: internal_opensearch"
  become: yes
    
- name: Security Plugin configuration | Cleanup local temporary directory
  local_action:
    module: file
    path: /tmp/opensearch-nodecerts
    state: absent
  run_once: true  
  become: yes
